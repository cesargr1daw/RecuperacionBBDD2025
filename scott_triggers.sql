/*alter session set "_oracle_script"=true;	
create user SCOTT identified by SCOTT;
GRANT CONNECT, RESOURCE, DBA TO SCOTT;*/

CREATE TABLE SCOTT.DEPT
(
 DEPTNO NUMBER(2),
 DNAME VARCHAR2(14),
 LOC VARCHAR2(13),
 CONSTRAINT PK_DEPT PRIMARY KEY (DEPTNO)
);
CREATE TABLE SCOTT.EMP
(
 EMPNO NUMBER(4),
 ENAME VARCHAR2(10),
 JOB VARCHAR2(9),
 MGR NUMBER(4),
 HIREDATE DATE,
 SAL NUMBER(7, 2),
 COMM NUMBER(7, 2),
 DEPTNO NUMBER(2),
 CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTNO) REFERENCES SCOTT.DEPT (DEPTNO),
 CONSTRAINT PK_EMP PRIMARY KEY (EMPNO)
);
INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH', 'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES', 'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');
INSERT INTO EMP VALUES(7369, 'SMITH', 'CLERK', 7902,TO_DATE('17-DIC-1980', 'DD-MON-YYYY'), 800, NULL, 20);
INSERT INTO EMP VALUES(7499, 'ALLEN', 'SALESMAN', 7698,TO_DATE('20-FEB-1981', 'DD-MON-YYYY'), 1600, 300, 30);
INSERT INTO EMP VALUES(7521, 'WARD', 'SALESMAN', 7698,TO_DATE('22-FEB-1981', 'DD-MON-YYYY'), 1250, 500, 30);
INSERT INTO EMP VALUES(7566, 'JONES', 'MANAGER', 7839,TO_DATE('2-ABR-1981', 'DD-MON-YYYY'), 2975, NULL, 20);
INSERT INTO EMP VALUES(7654, 'MARTIN', 'SALESMAN', 7698,TO_DATE('28-SEP-1981', 'DD-MON-YYYY'), 1250, 1400, 30);
INSERT INTO EMP VALUES(7698, 'BLAKE', 'MANAGER', 7839,TO_DATE('1-MAY-1981', 'DD-MON-YYYY'), 2850, NULL, 30);
INSERT INTO EMP VALUES(7782, 'CLARK', 'MANAGER', 7839,TO_DATE('9-JUN-1981', 'DD-MON-YYYY'), 2450, NULL, 10);
INSERT INTO EMP VALUES(7788, 'SCOTT', 'ANALYST', 7566,TO_DATE('09-DIC-1982', 'DD-MON-YYYY'), 3000, NULL, 20);
INSERT INTO EMP VALUES(7839, 'KING', 'PRESIDENT', NULL,TO_DATE('17-NOV-1981', 'DD-MON-YYYY'), 5000, NULL, 10);
INSERT INTO EMP VALUES(7844, 'TURNER', 'SALESMAN', 7698,TO_DATE('8-SEP-1981', 'DD-MON-YYYY'), 1500, 0, 30);
INSERT INTO EMP VALUES(7876, 'ADAMS', 'CLERK', 7788,TO_DATE('12-ENE-1983', 'DD-MON-YYYY'), 1100, NULL, 20);
INSERT INTO EMP VALUES(7900, 'JAMES', 'CLERK', 7698,TO_DATE('3-DIC-1981', 'DD-MON-YYYY'), 950, NULL, 30);
INSERT INTO EMP VALUES(7902, 'FORD', 'ANALYST', 7566,TO_DATE('3-DIC-1981', 'DD-MON-YYYY'), 3000, NULL, 20);
INSERT INTO EMP VALUES(7934, 'MILLER', 'CLERK', 7782,TO_DATE('23-ENE-1982', 'DD-MON-YYYY'), 1300, NULL, 10);

COMMIT;

--EJERCICIO 1
CREATE OR REPLACE TRIGGER trg_redondeo_sueldo
BEFORE INSERT OR UPDATE ON EMP
FOR EACH ROW
BEGIN
	:NEW.SAL := ROUND(:NEW.SAL, 1);
END;

--EJERCICIO 2
CREATE OR REPLACE TRIGGER trg_deptno_default
BEFORE INSERT OR UPDATE ON EMP
FOR EACH ROW
BEGIN
	IF INSERTING AND :NEW.DEPTNO IS NULL THEN
		:NEW.DEPTNO := 30; -- valor por defecto
	ELSIF UPDATING THEN
		:NEW.DEPTNO := :OLD.DEPTNO;
	END IF;
END;

--EJERCICIO 3
ALTER TABLE DEPT ADD (NUM_EMPLEADOS NUMBER);

CREATE OR REPLACE PROCEDURE inicializar_num_empleados IS
BEGIN
	FOR d IN (SELECT DEPTNO FROM DEPT) LOOP
		UPDATE DEPT
		SET NUM_EMPLEADOS = (SELECT COUNT(*) FROM EMP WHERE DEPTNO = d.DEPTNO)
		WHERE DEPTNO = d.DEPTNO;
	END LOOP;
END;

BEGIN
	inicializar_num_empleados;
END;

CREATE OR REPLACE TRIGGER trg_update_num_empleados
AFTER INSERT OR DELETE ON EMP
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		UPDATE DEPT SET NUM_EMPLEADOS = NUM_EMPLEADOS + 1 WHERE DEPTNO = :NEW.DEPTNO;
	ELSIF DELETING THEN
		UPDATE DEPT SET NUM_EMPLEADOS = NUM_EMPLEADOS - 1 WHERE DEPTNO = :OLD.DEPTNO;
	END IF;
END;

--EJERCICIO 4
CREATE OR REPLACE TRIGGER trg_verifica_jefe_departamento
BEFORE INSERT OR UPDATE ON EMP
FOR EACH ROW
DECLARE
	v_dept_jefe EMP.DEPTNO%TYPE;
BEGIN
	IF :NEW.MGR IS NOT NULL THEN
		SELECT DEPTNO INTO v_dept_jefe FROM EMP WHERE EMPNO = :NEW.MGR;
		IF v_dept_jefe != :NEW.DEPTNO THEN
			RAISE_APPLICATION_ERROR(-20001, 'El jefe debe estar en el mismo departamento.');
		END IF;
	END IF;
END;

--EJERCICIO 5
CREATE OR REPLACE TRIGGER trg_validar_comision
BEFORE INSERT OR UPDATE ON EMP
FOR EACH ROW
BEGIN
	IF :NEW.COMM IS NOT NULL AND :NEW.JOB != 'SALESMAN' THEN
		RAISE_APPLICATION_ERROR(-20002, 'Sólo los vendedores pueden tener comisión.');
	END IF;
END;

--EJERCICIO 6
CREATE TABLE AUDIT_EMP (
	USUARIO VARCHAR2(30),
	FECHA DATE,
	OPERACION VARCHAR2(10)
);

CREATE OR REPLACE TRIGGER trg_auditoria_emp
AFTER INSERT OR UPDATE OR DELETE ON EMP
FOR EACH ROW
BEGIN
	IF INSERTING THEN 
	INSERT INTO AUDIT_EMP (USUARIO, FECHA, OPERACION) VALUES (USER, SYSDATE,'INSERT');
	ELSIF UPDATING THEN 
	INSERT INTO AUDIT_EMP (USUARIO, FECHA, OPERACION) VALUES (USER, SYSDATE,'UPDATE');
	ELSE
		INSERT INTO AUDIT_EMP (USUARIO, FECHA, OPERACION) VALUES (USER, SYSDATE,'DELETE');
END;

--EJERCICIO 7
CREATE OR REPLACE TRIGGER trg_rango_salario
BEFORE INSERT OR UPDATE ON EMP
FOR EACH ROW
BEGIN
	IF :NEW.JOB = 'CLERK' THEN
		IF :NEW.SAL < 800 THEN :NEW.SAL := 800;
		ELSIF :NEW.SAL > 1100 THEN :NEW.SAL := 1100; END IF;
	ELSIF :NEW.JOB = 'ANALYST' THEN
		IF :NEW.SAL < 1200 THEN :NEW.SAL := 1200;
		ELSIF :NEW.SAL > 1600 THEN :NEW.SAL := 1600; END IF;
	ELSIF :NEW.JOB = 'MANAGER' THEN
		IF :NEW.SAL < 1800 THEN :NEW.SAL := 1800;
		ELSIF :NEW.SAL > 2000 THEN :NEW.SAL := 2000; END IF;
	END IF;
END;

--EJERCICIO 8
CREATE OR REPLACE TRIGGER trg_localidad_cambia
AFTER UPDATE OF LOC ON DEPT
FOR EACH ROW
BEGIN
	IF :OLD.LOC != :NEW.LOC THEN
		UPDATE EMP SET SAL = SAL * 1.10 WHERE DEPTNO = :OLD.DEPTNO;
	END IF;
END;

--EJERCICIO 9
CREATE OR REPLACE TRIGGER trg_control_depto_vacio
BEFORE DELETE OR UPDATE ON EMP
FOR EACH ROW
DECLARE
	v_quedan NUMBER;
BEGIN
	IF DELETING OR :OLD.DEPTNO != :NEW.DEPTNO THEN
	SELECT COUNT(*) INTO v_quedan FROM EMP
		WHERE DEPTNO = :OLD.DEPTNO AND EMPNO != :OLD.EMPNO;
			IF v_quedan = 0 THEN
			RAISE_APPLICATION_ERROR(-20003, 'No se puede dejar un departamento sin empleados.');
		END IF;
	END IF;
END;
